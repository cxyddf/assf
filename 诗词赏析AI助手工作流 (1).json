{
  "name": "诗词赏析AI助手工作流",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/api/poetry-analysis",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "3fa76c8e-4a98-421d-8b87-1fb8aa35c560",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -880,
        -128
      ],
      "webhookId": "aba322f8-e849-4fa2-9ea8-2940a4105132"
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first().json;\nconst poetry = inputData.poetry || inputData.body?.poetry || inputData.query?.poetry;\n\nif (!poetry || typeof poetry !== 'string') {\n  throw new Error('请输入有效的诗词内容');\n}\n\nconst aiRequest = {\n  poetry: poetry.trim(),\n  options: inputData.options || inputData.body?.options || {}\n};\n\nreturn [{ json: aiRequest }];"
      },
      "id": "61c66062-b483-4a6b-ae3a-0e35c512cd06",
      "name": "验证输入数据",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        -128
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.poetry }}",
        "options": {
          "systemMessage": "你是一位专业的诗词鉴赏专家。请对用户提供的诗词进行全面深入的分析,包括:1. 逐句翻译 2. 主题思想 3. 艺术特色(修辞手法、意象运用等)4. 历史背景 5. 作者生平与创作背景 6. 整体赏析。请用专业但易懂的语言,帮助读者深入理解诗词的内涵与美感。"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        32,
        -128
      ],
      "id": "a8c82402-b3b3-489b-816a-dfcf9b083b66",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        96,
        96
      ],
      "id": "b8971bd7-41ba-4bd3-96f7-fd64b6c98f13",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "iHV42ZkozYyLZvG4",
          "name": "DeepSeek account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $input.first().json;\n\nlet analysisResult;\ntry {\n  // 检查AI响应的结构\n  let content = '';\n  \n  // 处理不同的AI响应格式\n  if (aiResponse.choices && aiResponse.choices[0] && aiResponse.choices[0].message) {\n    content = aiResponse.choices[0].message.content;\n  } else if (aiResponse.output) {\n    content = aiResponse.output;\n  } else if (aiResponse.content) {\n    content = aiResponse.content;\n  } else {\n    // 如果无法识别格式，直接使用整个响应\n    content = JSON.stringify(aiResponse, null, 2);\n  }\n  \n  // 检查内容是否为空\n  if (!content || content.trim() === '') {\n    throw new Error('AI返回内容为空');\n  }\n  \n  // 尝试解析JSON格式的内容\n  try {\n    const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      analysisResult = JSON.parse(jsonMatch[0]);\n    } else {\n      // 如果不是JSON格式，将AI返回的文本内容作为赏析结果\n      // 直接使用AI返回的完整文本作为赏析内容\n      analysisResult = {\n        translation: \"逐句翻译：\\n\" + (content.includes(\"逐句翻译\") ? content.split(\"逐句翻译\")[1]?.split(\"主题思想\")[0]?.trim() || \"翻译内容\" : \"翻译内容\"),\n        theme: \"主题思想：\\n\" + (content.includes(\"主题思想\") ? content.split(\"主题思想\")[1]?.split(\"艺术特色\")[0]?.trim() || \"主题分析\" : \"主题分析\"),\n        artistic_features: \"艺术特色：\\n\" + (content.includes(\"艺术特色\") ? content.split(\"艺术特色\")[1]?.split(\"历史背景\")[0]?.trim() || \"艺术特色分析\" : \"艺术特色分析\"),\n        historical_context: \"历史背景：\\n\" + (content.includes(\"历史背景\") ? content.split(\"历史背景\")[1]?.split(\"作者与创作背景\")[0]?.trim() || \"历史背景\" : \"历史背景\"),\n        author_insights: \"作者解读：\\n\" + (content.includes(\"作者与创作背景\") ? content.split(\"作者与创作背景\")[1]?.split(\"整体赏析\")[0]?.trim() || \"作者解读\" : \"作者解读\"),\n        appreciation: \"整体赏析：\\n\" + (content.includes(\"整体赏析\") ? content.split(\"整体赏析\")[1]?.trim() || content : content)\n      };\n    }\n  } catch (parseError) {\n    // 如果解析失败，创建默认的分析结构\n    analysisResult = {\n      translation: \"逐句翻译\",\n      theme: \"主题思想\",\n      artistic_features: \"艺术特色\",\n      historical_context: \"历史背景\",\n      author_insights: \"作者解读\",\n      appreciation: content\n    };\n  }\n} catch (error) {\n  // 只有在真正出错时才返回错误\n  analysisResult = {\n    error: \"分析失败：\" + error.message,\n    raw_response: aiResponse\n  };\n}\n\n// 检查分析结果是否有效\nif (analysisResult.error && analysisResult.error.includes(\"分析失败\")) {\n  // 如果有错误信息，返回错误\n  const response = {\n    success: false,\n    data: analysisResult,\n    timestamp: new Date().toISOString()\n  };\n  return [{ json: response }];\n} else {\n  // 成功的情况\n  const response = {\n    success: true,\n    data: analysisResult,\n    timestamp: new Date().toISOString()\n  };\n  return [{ json: response }];\n}"
      },
      "id": "7076020c-f975-4f5e-b198-256a15ca0422",
      "name": "处理AI响应",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        384,
        -128
      ]
    },
    {
      "parameters": {
        "enableResponseOutput": true,
        "options": {},
        "responseData": "={{ $json }}"
      },
      "id": "final-response-1234",
      "name": "最终响应",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        608,
        -128
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "验证输入数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "验证输入数据": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "处理AI响应",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "处理AI响应": {
      "main": [
        [
          {
            "node": "最终响应",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "any",
    "availableInMCP": false
  },
  "versionId": "52a3b344-bb5f-4811-b02e-8aec1d08d071",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "507d8ff01359507b49e02529cac87b9989c3a05b72adfae49a04c9d6b01615b5"
  },
  "id": "yDqDhhsKI87xsxVd",
  "tags": []
}